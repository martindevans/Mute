@namespace Mute.Moe.Services.DiceLang
@classname DiceLangParser
@using System.Globalization 
@using System.Collections.Generic;
@using System.Linq;
@using Mute.Moe.Services.Randomness;
@using Mute.Moe.Services.DiceLang.AST;
@start main_expr

main_expr <IAstNode>
    = _ value:additive _ EOF { value }

additive <IAstNode> -memoize
    = left:additive _ "+" _ right:multiplicative { new Add(left, right) }
    / left:additive _ "-" _ right:multiplicative { new Subtract(left, right) }
    / multiplicative

multiplicative <IAstNode> -memoize
    = left:multiplicative _ "*" _ right:power { new Multiply(left, right) }
    / left:multiplicative _ "/" _ right:power { new Divide(left, right) }
    / power

power <IAstNode>
    = left:primary _ "^" _ right:power { new Exponent(left, right) }
    / primary

primary <IAstNode> -memoize
    = number
    / "-" _ primary:primary { new Negate(primary) }
    / "(" _ additive:additive _ ")" { new Parens(additive) }

number <IAstNode>
    = e:dice_explode { e }
    / d:dice { d }
    / d:decimal { d }
    / m:macro_invocation { m }
    / i:identifier { new Parameter(i) }

dice_explode <DiceRollValue>
    = a:integer "d" b:integer "E" c:integer { new DiceRollValue(a, b, c) }

dice <DiceRollValue>
    = a:integer "d" b:integer { new DiceRollValue(a, b, null) }

decimal <ConstantValue> -memoize
    = value:([0-9]+ ("." [0-9]+)?) { new ConstantValue(double.Parse(string.Join("", value), CultureInfo.InvariantCulture)) }

integer <uint> -memoize
    = value:([0-9]+) { uint.Parse(string.Join("", value), CultureInfo.InvariantCulture) }

macro_invocation <MacroInvoke> -memoize
     = ns:identifier "::" n:identifier "(" a:macro_args ")" { new MacroInvoke(ns, n, a) }
     / n:identifier "(" a:macro_args ")" { new MacroInvoke(null, n, a) }

macro_args <IReadOnlyList<IAstNode>> -memoize
    = i:additive<0,,","_> { i.ToArray() }



MacroDefinition <MacroDefinition> -public
    = _ ns:identifier "::" n:identifier "(" a:identifier<0,,","_> ")" _ "=" _ e:additive _ EOF { new MacroDefinition(ns, n, a.ToArray(), e) }



identifier <string>
    = s:([a-zA-Z_][a-zA-Z0-9_]<0,>) { s }

_
    = [ \t\r\n]*

EOF
    = !.
    / unexpected:. #error{ "Unexpected character '" + unexpected + "'" }